name: Test matrix

on:
  workflow_dispatch:

env:
  UPSTREAM_REPO: corretto/corretto-21
  UPSTREAM_BRANCH: lilliput-2
  GITHUB_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
  CORRETTO_SOURCE_DIR: corretto_source_checkout
  MSYS2_PACKAGES: >-
    base-devel
    unzip
    zip
    autoconf
    automake
    mingw-w64-x86_64-toolchain

jobs:
  build_if_new_commits:
    runs-on: windows-2022
    permissions:
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "baseline"
            build_dir: "C:"
            num_cores: 4
            memory_size: 16384
            jobs: 4
            jvm_args: "-Xmx8G"
            precompiled_headers: true
            javac_server: true
          
          - name: "disk_d_optimized"
            build_dir: "D:"
            num_cores: 4
            memory_size: 16384
            jobs: 4
            jvm_args: "-Xmx8G"
            precompiled_headers: true
            javac_server: true
          
          - name: "max_parallel_jobs"
            build_dir: "D:"
            num_cores: 4
            memory_size: 16384
            jobs: 8
            jvm_args: "-Xmx8G"
            precompiled_headers: true
            javac_server: true
          
          - name: "conservative_memory"
            build_dir: "D:"
            num_cores: 4
            memory_size: 12288
            jobs: 3
            jvm_args: "-Xmx6G"
            precompiled_headers: true
            javac_server: true
          
          - name: "no_pch"
            build_dir: "D:"
            num_cores: 4
            memory_size: 16384
            jobs: 4
            jvm_args: "-Xmx8G"
            precompiled_headers: false
            javac_server: true
          
          - name: "no_javac_server"
            build_dir: "D:"
            num_cores: 4
            memory_size: 16384
            jobs: 4
            jvm_args: "-Xmx8G"
            precompiled_headers: true
            javac_server: false
          
          - name: "minimal_resources"
            build_dir: "D:"
            num_cores: 2
            memory_size: 8192
            jobs: 2
            jvm_args: "-Xmx4G"
            precompiled_headers: true
            javac_server: true
          
          - name: "max_jvm_memory"
            build_dir: "D:"
            num_cores: 4
            memory_size: 16384
            jobs: 4
            jvm_args: "-Xmx12G"
            precompiled_headers: true
            javac_server: true

    steps:
      - name: Display Build Configuration
        run: |
          Write-Host "===== Build Configuration: ${{ matrix.config.name }} ====="
          Write-Host "Build Directory: ${{ matrix.config.build_dir }}"
          Write-Host "Cores: ${{ matrix.config.num_cores }}"
          Write-Host "Memory: ${{ matrix.config.memory_size }}MB"
          Write-Host "Jobs: ${{ matrix.config.jobs }}"
          Write-Host "JVM Args: ${{ matrix.config.jvm_args }}"
          Write-Host "Precompiled Headers: ${{ matrix.config.precompiled_headers }}"
          Write-Host "Javac Server: ${{ matrix.config.javac_server }}"
        shell: pwsh

      - name: Read Last Built Upstream SHA
        id: read_last_sha
        run: |
          $sha_from_var = "${{ vars[env.GITHUB_VARIABLE_NAME] || '' }}"
          echo "last_sha=$sha_from_var" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Set up workspace on faster disk
        if: matrix.config.build_dir == 'D:'
        run: |
          # Create workspace on D: drive
          $workspaceOnD = "D:\gh_workspace"
          if (Test-Path $workspaceOnD) {
            Remove-Item -Recurse -Force $workspaceOnD
          }
          New-Item -ItemType Directory -Path $workspaceOnD | Out-Null
          echo "WORKSPACE_ROOT=$workspaceOnD" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Checkout upstream repository
        id: checkout_upstream
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          fetch-depth: 1
          path: ${{ env.CORRETTO_SOURCE_DIR }}

      - name: Move source to faster disk if needed
        if: matrix.config.build_dir == 'D:'
        run: |
          $sourceOnC = Join-Path $env:GITHUB_WORKSPACE $env:CORRETTO_SOURCE_DIR
          $sourceOnD = Join-Path $env:WORKSPACE_ROOT $env:CORRETTO_SOURCE_DIR
          Move-Item -Path $sourceOnC -Destination $sourceOnD -Force
          echo "CORRETTO_SOURCE_DIR=$sourceOnD" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Get Current Upstream SHA
        id: get_upstream_sha
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $current_sha = (git rev-parse HEAD).Trim()
          echo "sha=$current_sha" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Determine if Build is Needed
        id: check_build_condition
        run: |
          $needs_build_ps_var = "false"
          if ("${{ github.event_name }}" -eq "workflow_dispatch" || "${{ steps.read_last_sha.outputs.last_sha }}" -ne "${{ steps.get_upstream_sha.outputs.sha }}") {
            $needs_build_ps_var = "true"
          }
          echo "needs_build=$needs_build_ps_var" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Update GitHub Repository Variable with PAT
        if: steps.check_build_condition.outputs.needs_build == 'true' && matrix.config.name == 'baseline'
        env:
          NEW_SHA_TO_SAVE: ${{ steps.get_upstream_sha.outputs.sha }}
          GH_TOKEN: ${{ secrets.MY_PAT }}
        run: |
          gh variable set "${{ env.GITHUB_VARIABLE_NAME }}" --body "${NEW_SHA_TO_SAVE}" --repo "${{ github.repository }}"
        shell: bash

      - name: Set up Corretto 21 as Bootstrap JDK
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Set up MSYS2
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: ${{ env.MSYS2_PACKAGES }}

      - name: Start Build Timer
        if: steps.check_build_condition.outputs.needs_build == 'true'
        id: start_timer
        run: |
          $start_time = [DateTimeOffset]::Now.ToUnixTimeMilliseconds()
          echo "start_time=$start_time" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Configure Corretto Build
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: msys2 {0}
        run: |
          BOOT_JDK_MSYS=$(cygpath -u "$JAVA_HOME")
          
          # Build configure command with matrix parameters
          CONFIGURE_ARGS="--with-boot-jdk=$BOOT_JDK_MSYS"
          CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-warnings-as-errors"
          CONFIGURE_ARGS="$CONFIGURE_ARGS --with-debug-level=release"
          CONFIGURE_ARGS="$CONFIGURE_ARGS --with-num-cores=${{ matrix.config.num_cores }}"
          CONFIGURE_ARGS="$CONFIGURE_ARGS --with-memory-size=${{ matrix.config.memory_size }}"
          CONFIGURE_ARGS="$CONFIGURE_ARGS --with-jobs=${{ matrix.config.jobs }}"
          CONFIGURE_ARGS="$CONFIGURE_ARGS --with-boot-jdk-jvmargs=${{ matrix.config.jvm_args }}"
          
          if [ "${{ matrix.config.precompiled_headers }}" = "false" ]; then
            CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-precompiled-headers"
          fi
          
          if [ "${{ matrix.config.javac_server }}" = "false" ]; then
            CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-javac-server"
          else
            CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-javac-server"
          fi
          
          echo "Configure arguments: $CONFIGURE_ARGS"
          ./configure $CONFIGURE_ARGS

      - name: Build Corretto (make images)
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: msys2 {0}
        run: |
          make JOBS=${{ matrix.config.jobs }} LOG=info images

      - name: Calculate Build Time
        if: steps.check_build_condition.outputs.needs_build == 'true'
        id: build_time
        run: |
          $end_time = [DateTimeOffset]::Now.ToUnixTimeMilliseconds()
          $start_time = [long]${{ steps.start_timer.outputs.start_time }}
          $duration_ms = $end_time - $start_time
          $duration_min = [math]::Round($duration_ms / 60000, 2)
          
          Write-Host "Build completed in $duration_min minutes"
          echo "duration_minutes=$duration_min" >> $env:GITHUB_OUTPUT
          
          # Save results to file for later analysis
          $results = @{
            config_name = "${{ matrix.config.name }}"
            duration_minutes = $duration_min
            build_dir = "${{ matrix.config.build_dir }}"
            num_cores = ${{ matrix.config.num_cores }}
            memory_size = ${{ matrix.config.memory_size }}
            jobs = ${{ matrix.config.jobs }}
            jvm_args = "${{ matrix.config.jvm_args }}"
            precompiled_headers = "${{ matrix.config.precompiled_headers }}"
            javac_server = "${{ matrix.config.javac_server }}"
          }
          
          $results | ConvertTo-Json | Out-File -FilePath "build_performance_${{ matrix.config.name }}.json"
        shell: pwsh

      - name: Upload Performance Results
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ matrix.config.name }}
          path: build_performance_*.json

      - name: Clean Debug Symbols from JDK Image
        if: steps.check_build_condition.outputs.needs_build == 'true' && matrix.config.name == 'disk_d_optimized'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: pwsh
        run: |
          $jdkImagePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          if ($jdkImagePath) { Get-ChildItem -Path $jdkImagePath -Recurse -Include "*.pdb", "*.map" | Remove-Item -Force -EA SilentlyContinue }

      - name: Prepare Artifact Structure
        if: steps.check_build_condition.outputs.needs_build == 'true' && matrix.config.name == 'disk_d_optimized'
        id: prepare_artifact
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: pwsh
        run: |
          $jdkSourcePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          $releaseFile = Join-Path $jdkSourcePath "release"
          $releaseContent = Get-Content $releaseFile -Raw | ConvertFrom-StringData -Delimiter '='
          $javaVersion = $releaseContent.JAVA_VERSION.Trim('"')
          echo "JAVA_VERSION_EXTRACTED=$javaVersion" >> $GITHUB_OUTPUT
          $stagingDir = Join-Path $env:GITHUB_WORKSPACE "staging_artifact"
          $targetDirName = "corretto-21-lilliput-${javaVersion}"
          $fullTargetPathInStaging = Join-Path $stagingDir $targetDirName
          if (Test-Path $stagingDir) { Remove-Item -Recurse -Force $stagingDir }
          New-Item -ItemType Directory -Path $fullTargetPathInStaging | Out-Null
          Move-Item -Path (Join-Path $jdkSourcePath "*") -Destination $fullTargetPathInStaging -Force

      - name: Upload Windows JDK Build Artifact
        if: steps.check_build_condition.outputs.needs_build == 'true' && matrix.config.name == 'disk_d_optimized'
        uses: actions/upload-artifact@v4
        with:
          name: corretto-21-lilliput-${{ steps.prepare_artifact.outputs.JAVA_VERSION_EXTRACTED }}-windows-x64-jdk
          path: staging_artifact/

  analyze_performance:
    needs: build_if_new_commits
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Download all performance results
        uses: actions/download-artifact@v4
        with:
          pattern: performance-results-*
          merge-multiple: true

      - name: Analyze and Display Results
        run: |
          echo "# Build Performance Comparison Report"
          echo "=================================="
          echo ""
          
          # Parse all JSON files and create a summary
          for file in build_performance_*.json; do
            if [ -f "$file" ]; then
              config_name=$(jq -r '.config_name' "$file")
              duration=$(jq -r '.duration_minutes' "$file")
              echo "## Configuration: $config_name"
              echo "Build Time: ${duration} minutes"
              jq -r 'to_entries | map(select(.key != "config_name" and .key != "duration_minutes")) | .[] | "- \(.key): \(.value)"' "$file"
              echo ""
            fi
          done
          
          # Create a sorted summary by build time
          echo "## Performance Summary (Sorted by Build Time)"
          echo "============================================"
          for file in build_performance_*.json; do
            if [ -f "$file" ]; then
              jq -r '"\(.duration_minutes)|\(.config_name)"' "$file"
            fi
          done | sort -n | while IFS='|' read -r duration name; do
            echo "- $name: $duration minutes"
          done
