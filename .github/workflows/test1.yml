name: Build Corretto 21 lilliput-2 for Windows with MSYS2

on:
  schedule:
    - cron: '0 5 * * 1'
  workflow_dispatch:

env:
  UPSTREAM_REPO: corretto/corretto-21
  UPSTREAM_BRANCH: lilliput-2
  GITHUB_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
  CORRETTO_SOURCE_DIR: corretto_source_checkout
  # Replaced CYGWIN_PACKAGES with MSYS2_PACKAGES, using packages from Corretto's own workflow
  MSYS2_PACKAGES: >-
    make
    autoconf
    unzip
    zip
    diffutils
    patch
    mingw-w64-x86_64-toolchain

jobs:
  build_if_new_commits:
    runs-on: windows-2025
    permissions:
      contents: read
      actions: read
    steps:
      # Steps 1-5 remain unchanged as they use PowerShell and are independent of Cygwin/MSYS2
      - name: Read Last Built Upstream SHA from GitHub Variable
        id: read_last_sha
        run: |
          $sha_from_var = "${{ vars[env.GITHUB_VARIABLE_NAME] || '' }}"
          echo "last_sha=$sha_from_var" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Checkout upstream repository
        id: checkout_upstream
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          fetch-depth: 1
          path: ${{ env.CORRETTO_SOURCE_DIR }}

      - name: Get Current Upstream SHA
        id: get_upstream_sha
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $current_sha = (git rev-parse HEAD).Trim()
          echo "sha=$current_sha" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Determine if Build is Needed
        id: check_build_condition
        run: |
          $last_sha = "${{ steps.read_last_sha.outputs.last_sha }}"
          $current_sha = "${{ steps.get_upstream_sha.outputs.sha }}"
          $needs_build_ps_var = "false"
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $needs_build_ps_var = "true"
          } elseif ($last_sha -ne $current_sha) {
            $needs_build_ps_var = "true"
          }
          echo "needs_build=$needs_build_ps_var" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Update GitHub Repository Variable with PAT
        if: steps.check_build_condition.outputs.needs_build == 'true'
        env:
          NEW_SHA_TO_SAVE: ${{ steps.get_upstream_sha.outputs.sha }}
          GH_TOKEN: ${{ secrets.MY_PAT }}
          TARGET_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
        run: |
          gh variable set "${TARGET_VARIABLE_NAME}" --body "${NEW_SHA_TO_SAVE}" --repo "${{ github.repository }}"
        shell: pwsh

      # Step 6 remains unchanged
      - name: Set up Corretto 21 as Bootstrap JDK
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          architecture: x64
        id: setup_jdk

      # This single step replaces your previous steps 7, 8, and 9 (Cygwin cache, install, and PATH)
      - name: Set up MSYS2 environment
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: ${{ env.MSYS2_PACKAGES }}

      # Replaces step 10, now using the msys2 shell
      - name: Configure Corretto Build
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: msys2 {0}
        run: |
          # The 'setup-java' action sets JAVA_HOME. We convert it to a path MSYS2 understands.
          # cygpath is available in the MSYS2 shell provided by the action.
          BOOT_JDK_NIX_PATH="$(cygpath -u "$JAVA_HOME")"
          echo "Using Bootstrap JDK (MSYS2 path): $BOOT_JDK_NIX_PATH"
          ./configure --with-boot-jdk="$BOOT_JDK_NIX_PATH" --disable-warnings-as-errors --with-debug-level=release

      # Replaces step 11, now using the msys2 shell
      - name: Build Corretto (make images)
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: msys2 {0}
        run: |
          # Use getconf to fetch the number of processors and run make in parallel.
          make JOBS=$(getconf _NPROCESSORS_ONLN) images

      # Steps 12, 13, and 14 remain unchanged as they use PowerShell and are independent of Cygwin/MSYS2
      - name: Clean Debug Symbols from JDK Image
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $jdkImagePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          if ($jdkImagePath) {
            Get-ChildItem -Path $jdkImagePath -Recurse -Include "*.pdb", "*.map" | Remove-Item -Force -ErrorAction SilentlyContinue
          }
        shell: pwsh

      - name: Prepare Artifact Structure
        if: steps.check_build_condition.outputs.needs_build == 'true'
        id: prepare_artifact
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $jdkSourcePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          if (-not $jdkSourcePath) { Write-Error "Could not find source JDK image directory"; exit 1 }
          $releaseFile = Join-Path $jdkSourcePath "release"
          if (-not (Test-Path $releaseFile)) { Write-Error "Could not find release file at $releaseFile"; exit 1 }
          $releaseContent = Get-Content $releaseFile -Raw | ConvertFrom-StringData -Delimiter '='
          $javaVersion = $releaseContent.JAVA_VERSION.Trim('"')
          if (-not $javaVersion) { Write-Error "Could not parse JAVA_VERSION from release file"; exit 1 }
          echo "JAVA_VERSION_EXTRACTED=$javaVersion" >> $GITHUB_OUTPUT
          $stagingDir = Join-Path $env:GITHUB_WORKSPACE "staging_artifact"
          $targetDirName = "corretto-21-lilliput-${javaVersion}"
          $fullTargetPathInStaging = Join-Path $stagingDir $targetDirName
          if (Test-Path $stagingDir) { Remove-Item -Recurse -Force $stagingDir }
          New-Item -ItemType Directory -Path $fullTargetPathInStaging | Out-Null
          Move-Item -Path (Join-Path $jdkSourcePath "*") -Destination $fullTargetPathInStaging -Force
        shell: pwsh

      - name: Upload Windows JDK Build Artifact
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: corretto-21-lilliput-${{ steps.prepare_artifact.outputs.JAVA_VERSION_EXTRACTED }}-windows-x64-jdk
          path: staging_artifact/
