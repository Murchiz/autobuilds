name: Build Corretto 21 (lilliput-2) for Windows (Optimized)

on:
  schedule:
    - cron: '0 5 * * 1'
  workflow_dispatch:

env:
  UPSTREAM_REPO: corretto/corretto-21
  UPSTREAM_BRANCH: lilliput-2
  GITHUB_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
  CORRETTO_SOURCE_DIR: corretto_source_checkout
  CYGWIN_PACKAGES: make,coreutils,diffutils,binutils,zip,unzip,autoconf,automake,ccache
  CCACHE_DIR_PATH: ${{ github.workspace }}\.ccache

jobs:
  build_if_new_commits:
    runs-on: windows-2025
    permissions:
      contents: read
      actions: write

    steps:
      # Steps 1-5 remain the same
      - name: Read Last Built Upstream SHA
        id: read_last_sha
        run: |
          $sha_from_var = "${{ vars[env.GITHUB_VARIABLE_NAME] || '' }}"
          echo "last_sha=$sha_from_var" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Checkout upstream repository
        id: checkout_upstream
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          fetch-depth: 1
          path: ${{ env.CORRETTO_SOURCE_DIR }}

      - name: Get Current Upstream SHA
        id: get_upstream_sha
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $current_sha = (git rev-parse HEAD).Trim()
          echo "sha=$current_sha" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Determine if Build is Needed
        id: check_build_condition
        run: |
          $last_sha = "${{ steps.read_last_sha.outputs.last_sha }}"
          $current_sha = "${{ steps.get_upstream_sha.outputs.sha }}"
          $needs_build = "false"
          if ("${{ github.event_name }}" -eq "workflow_dispatch" -or $last_sha -ne $current_sha) {
            $needs_build = "true"
          }
          echo "needs_build=$needs_build" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Set up Corretto 21 as Bootstrap JDK
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          architecture: x64

      # Steps 6-12 (Caching and PATH setup) remain the same
      - name: Create ccache directory
        if: steps.check_build_condition.outputs.needs_build == 'true'
        run: New-Item -ItemType Directory -Force -Path "${{ env.CCACHE_DIR_PATH }}"
        shell: pwsh

      - name: Cache ccache directory
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR_PATH }}
          key: ${{ runner.os }}-ccache-${{ env.UPSTREAM_BRANCH }}-${{ steps.get_upstream_sha.outputs.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ env.UPSTREAM_BRANCH }}-

      - name: Cache Corretto build directory
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.CORRETTO_SOURCE_DIR }}/build
          key: ${{ runner.os }}-corretto-build-${{ steps.get_upstream_sha.outputs.sha }}
          restore-keys: |
            ${{ runner.os }}-corretto-build-${{ env.UPSTREAM_BRANCH }}-

      - name: Cache Cygwin installation
        if: steps.check_build_condition.outputs.needs_build == 'true'
        id: cache-cygwin
        uses: actions/cache@v4
        with:
          path: C:\cygwin64
          key: ${{ runner.os }}-cygwin-${{ hashFiles(github.workflow) }}

      - name: Install Cygwin with packages (if not cached)
        if: steps.check_build_condition.outputs.needs_build == 'true' && steps.cache-cygwin.outputs.cache-hit != 'true'
        run: |
          choco install cygwin --params "/InstallDir:C:\cygwin64 /NoAdmin" -y
          $cygwinSetupPath = "C:\cygwin64\cygwinsetup.exe"
          $cygwinMirror = "https://mirrors.kernel.org/sourceware/cygwin/"
          Start-Process -FilePath $cygwinSetupPath -ArgumentList "-q -s $cygwinMirror -P ${{ env.CYGWIN_PACKAGES }}" -Wait -NoNewWindow
        shell: pwsh

      - name: Add Cygwin to PATH
        if: steps.check_build_condition.outputs.needs_build == 'true'
        run: echo "C:\cygwin64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Enable ccache by prepending to PATH
        if: steps.check_build_condition.outputs.needs_build == 'true'
        run: echo "C:\cygwin64\lib\ccache\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
      
      # 13. Configure Corretto Build
      - name: Configure Corretto Build
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $BOOT_JDK_CYGWIN = (& cygpath --unix $env:JAVA_HOME).Trim()
          $CCACHE_DIR_CYGWIN = (& cygpath --unix "${{ env.CCACHE_DIR_PATH }}").Trim()
          Write-Host "Forcing GCC toolchain and using CCACHE_DIR (Cygwin path): $CCACHE_DIR_CYGWIN"
          # CORRECTED: Export CC and CXX to force the use of the GCC compiler from Cygwin, which ccache can wrap.
          C:\cygwin64\bin\bash -c "export CCACHE_DIR='$CCACHE_DIR_CYGWIN' && export CC=gcc && export CXX=g++ && ./configure --with-boot-jdk='$BOOT_JDK_CYGWIN' --disable-warnings-as-errors --with-debug-level=release"
        shell: pwsh

      # 14. Build Corretto (make images)
      - name: Build Corretto (make images)
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $CCACHE_DIR_CYGWIN = (& cygpath --unix "${{ env.CCACHE_DIR_PATH }}").Trim()
          C:\cygwin64\bin\bash -c "export CCACHE_DIR='$CCACHE_DIR_CYGWIN' && make JOBS=\$(getconf _NPROCESSORS_ONLN) images"
        shell: pwsh

      # Steps 15-18 remain the same
      - name: Clean Debug Symbols from JDK Image
        if: steps.check_build_condition.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $jdkImagePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          if ($jdkImagePath) {
            Get-ChildItem -Path $jdkImagePath -Recurse -Include "*.pdb", "*.map" | Remove-Item -Force -ErrorAction SilentlyContinue
          }
        shell: pwsh

      - name: Prepare Artifact Structure
        if: steps.check_build_condition.outputs.needs_build == 'true'
        id: prepare_artifact
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $jdkSourcePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          $releaseFile = Join-Path $jdkSourcePath "release"
          $releaseContent = Get-Content $releaseFile -Raw | ConvertFrom-StringData -Delimiter '='
          $javaVersion = $releaseContent.JAVA_VERSION.Trim('"')
          echo "JAVA_VERSION_EXTRACTED=$javaVersion" >> $GITHUB_OUTPUT
          $stagingDir = Join-Path $env:GITHUB_WORKSPACE "staging_artifact"
          $targetDirName = "corretto-21-lilliput-${javaVersion}"
          $fullTargetPathInStaging = Join-Path $stagingDir $targetDirName
          if (Test-Path $stagingDir) { Remove-Item -Recurse -Force $stagingDir }
          New-Item -ItemType Directory -Path $fullTargetPathInStaging | Out-Null
          Move-Item -Path (Join-Path $jdkSourcePath "*") -Destination $fullTargetPathInStaging -Force
        shell: pwsh

      - name: Upload Windows JDK Build Artifact
        if: steps.check_build_condition.outputs.needs_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: corretto-21-lilliput-${{ steps.prepare_artifact.outputs.JAVA_VERSION_EXTRACTED }}-windows-x64-jdk
          path: staging_artifact/

      - name: Update GitHub Variable on Success
        if: success() && steps.check_build_condition.outputs.needs_build == 'true'
        env:
          NEW_SHA_TO_SAVE: ${{ steps.get_upstream_sha.outputs.sha }}
          GH_TOKEN: ${{ secrets.MY_PAT }}
        run: |
          $repoName = $env:GITHUB_REPOSITORY.Trim()
          gh variable set $env:GITHUB_VARIABLE_NAME --body $env:NEW_SHA_TO_SAVE --repo $repoName
        shell: pwsh
