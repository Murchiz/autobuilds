name: Build Corretto 21 lilliput-2 for Windows (Optimized)

on:
  schedule:
    - cron: '0 5 * * 1'  # 8:00 MSK (UTC+3) = 5:00 UTC
  workflow_dispatch:

env:
  UPSTREAM_REPO: corretto/corretto-21
  UPSTREAM_BRANCH: lilliput-2
  GITHUB_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
  CORRETTO_SOURCE_DIR: corretto_source_checkout
  CYGWIN_PACKAGES: make,coreutils,diffutils,binutils,zip,unzip,autoconf,automake
  BOOT_JDK_VERSION: 21

jobs:
  sha_check:
    runs-on: ubuntu-latest
    outputs:
      needs_build: ${{ steps.check_build_condition.outputs.needs_build }}
      current_sha: ${{ steps.get_upstream_sha.outputs.sha }}
    steps:
      - name: Check SHA in Linux
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          fetch-depth: 1

      - name: Get Current SHA
        id: get_upstream_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Read Last SHA
        id: read_last_sha
        run: |
          last_sha=$(gh variable get "${{ env.GITHUB_VARIABLE_NAME }}" --repo "${{ github.repository }}" 2>/dev/null || true)
          echo "last_sha=$last_sha" >> $GITHUB_OUTPUT

      - name: Check Build Condition
        id: check_build_condition
        run: |
          needs_build="false"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            needs_build="true"
          elif [ "${{ steps.read_last_sha.outputs.last_sha }}" != "${{ steps.get_upstream_sha.outputs.sha }}" ]; then
            needs_build="true"
          fi
          echo "needs_build=$needs_build" >> $GITHUB_OUTPUT

  build_windows:
    needs: sha_check
    if: needs.sha_check.outputs.needs_build == 'true'
    runs-on: windows-2022
    permissions:
      contents: write  # Required to update GitHub variables
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          path: ${{ env.CORRETTO_SOURCE_DIR }}

      - name: Setup Bootstrap JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.BOOT_JDK_VERSION }}
          architecture: x64

      - name: Cache MSYS2
        id: cache-msys2
        uses: actions/cache@v4
        with:
          path: C:\msys64
          key: msys2-${{ runner.os }}-${{ hashFiles('.github/msys2-packages.txt') }}

      - name: Install MSYS2
        if: steps.cache-msys2.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: >-
            base-devel
            zip
            unzip
            autoconf
            automake

      - name: Configure Build
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $bootJdk = (Get-Item "C:\hostedtoolcache\windows\Java_Corretto-${{ env.BOOT_JDK_VERSION }}-x64\*").FullName
          msys2_shell.cmd -c "export JAVA_HOME=$(cygpath -u $bootJdk) && ./configure --with-boot-jdk=$JAVA_HOME --disable-warnings-as-errors --with-debug-level=release"

      - name: Build with Parallel Jobs
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: msys2_shell.cmd -c "make JOBS=$env:NUMBER_OF_PROCESSORS images"

      - name: Clean Debug Symbols
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          Get-ChildItem -Path "build\*\images\jdk" -Recurse -Include "*.pdb","*.map" | Remove-Item -Force -ErrorAction SilentlyContinue

      - name: Update SHA Variable
        run: |
          gh variable set "${{ env.GITHUB_VARIABLE_NAME }}" --body "${{ needs.sha_check.outputs.current_sha }}" --repo "${{ github.repository }}"

      - name: Prepare Artifact
        id: prepare_artifact
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          $version = (Get-Content "build\*\images\jdk\release" | ConvertFrom-StringData).JAVA_VERSION.Trim('"')
          $artifactName = "corretto-21-lilliput-${version}-windows-x64-jdk"
          Compress-Archive -Path "build\*\images\jdk\*" -DestinationPath "$artifactName.zip" -CompressionLevel Optimal
          echo "artifact_name=$artifactName.zip" >> $env:GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.artifact_name }}
          path: ${{ env.CORRETTO_SOURCE_DIR }}/*.zip
          if-no-files-found: error
