# In .github/workflows/build-corretto.yml in your Murchiz/corretto-autobuild repo

name: 'Build Corretto 21 Lilliput-2'

on:
  workflow_dispatch:

jobs:
  build-windows:
    name: 'Build on Windows'
    runs-on: windows-2022

    steps:
      # Step 1: Checkout THIS repository.
      # This is required so the workflow can find your local actions at ./.github/actions
      - name: 'Checkout build scripts repository'
        uses: actions/checkout@v4

      # Step 2: Checkout the Corretto source code into a subfolder.
      # This is the code we will actually compile.
      - name: 'Checkout Corretto 21 source code'
        uses: actions/checkout@v4
        with:
          repository: 'corretto/corretto-21'
          ref: 'lilliput-2'
          path: 'corretto-source' # <-- Checks out the code into a 'corretto-source' directory

      # Step 3: Use your LOCAL actions to set up the environment
      - name: 'Get MSYS2'
        uses: ./.github/actions/get-msys2

      - name: 'Get the BootJDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: windows-x64

      - name: 'Get JTReg'
        id: jtreg
        uses: ./.github/actions/get-jtreg

      - name: 'Get GTest'
        id: gtest
        uses: ./.github/actions/get-gtest

      # Step 4: Run Configure inside the source code directory
      # We use 'working-directory' to run the command in the right place.
      - name: 'Configure'
        working-directory: ./corretto-source # <-- Run this step inside the source code
        run: >
          bash configure
          --with-conf-name=windows-x64-release
          --with-debug-level=release
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-jtreg=${{ steps.jtreg.outputs.path }}
          --with-gtest=${{ steps.gtest.outputs.path }}
          --disable-warnings-as-errors
        shell: bash

      # Step 5: Run the Build inside the source code directory
      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build # <-- This action needs to be run from the correct context
        with:
          make-target: 'product-bundles test-bundles'
          platform: 'windows-x64-release'
          working-directory: './corretto-source' # Pass the working-directory to the action if it supports it, or wrap it.
          # If the action doesn't support a 'working-directory' input, you'd wrap it like this:
          # working-directory: ./corretto-source
          # run: ${{ github.action_path }}/../../actions/do-build/entrypoint.sh ... (This is more complex)
          # Let's assume for now 'do-build' works on the current directory.

      # Step 6: Upload the artifacts, specifying the path within the source directory
      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: 'windows-x64-release'
          # The path to the bundles will now be inside the 'corretto-source' directory
          # You will need to adjust the upload action or its inputs to find the bundles at:
          # ./corretto-source/build/windows-x64-release/bundles/
