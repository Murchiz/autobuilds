name: Build Corretto 21 lilliput-2 for Windows

on:
  schedule:
    # Every Monday at 05:00 UTC (08:00 Moscow time)
    - cron: '0 5 * * 1'
  workflow_dispatch:

env:
  UPSTREAM_REPO: corretto/corretto-21
  UPSTREAM_BRANCH: lilliput-2
  GITHUB_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
  CORRETTO_SOURCE_DIR: corretto_source_checkout
  CYGWIN_PACKAGES: make,coreutils,diffutils,binutils,zip,unzip,autoconf,automake,gcc-core,gcc-g++,gperf,patch,m4,cpio,gawk,file,procps-ng

jobs:
  # Step 1: Check if build is needed using Linux runner for efficiency
  check_build_needed:
    runs-on: ubuntu-latest
    outputs:
      needs_build: ${{ steps.check_build_condition.outputs.needs_build }}
      current_sha: ${{ steps.get_upstream_sha.outputs.sha }}
    steps:
      - name: Read Last Built Upstream SHA from GitHub Variable
        id: read_last_sha
        run: |
          echo "last_sha=${{ vars[env.GITHUB_VARIABLE_NAME] || '' }}" >> $GITHUB_OUTPUT
          echo "Last built upstream SHA: '${{ vars[env.GITHUB_VARIABLE_NAME] || '' }}'"

      - name: Checkout upstream repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          fetch-depth: 1
          path: ${{ env.CORRETTO_SOURCE_DIR }}

      - name: Get Current Upstream SHA
        id: get_upstream_sha
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        run: |
          current_sha=$(git rev-parse HEAD)
          echo "Current upstream SHA: '$current_sha'"
          echo "sha=$current_sha" >> $GITHUB_OUTPUT

      - name: Determine if Build is Needed
        id: check_build_condition
        run: |
          last_sha="${{ steps.read_last_sha.outputs.last_sha }}"
          current_sha="${{ steps.get_upstream_sha.outputs.sha }}"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "needs_build=true" >> $GITHUB_OUTPUT
            echo "Manual dispatch: Build is forced."
          elif [[ "$last_sha" != "$current_sha" ]]; then
            echo "needs_build=true" >> $GITHUB_OUTPUT
            echo "SHA changed (was '$last_sha', now '$current_sha'). Build needed."
          else
            echo "needs_build=false" >> $GITHUB_OUTPUT
            echo "SHA unchanged ('$current_sha'). No build needed."
          fi

  # Step 2: Build on Windows if needed
  build_windows:
    needs: check_build_needed
    if: needs.check_build_needed.outputs.needs_build == 'true'
    runs-on: windows-2022
    timeout-minutes: 300  # 5 hours timeout for build
    permissions:
      contents: read
      actions: write
    steps:
      - name: Update GitHub Repository Variable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh variable set ${{ env.GITHUB_VARIABLE_NAME }} --body "${{ needs.check_build_needed.outputs.current_sha }}" --repo "${{ github.repository }}"
        shell: pwsh

      - name: Checkout upstream repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_BRANCH }}
          fetch-depth: 1
          path: ${{ env.CORRETTO_SOURCE_DIR }}

      - name: Set up Corretto 21 as Bootstrap JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          architecture: x64

      - name: Move to D: drive for better performance
        run: |
          $sourceDir = "${{ github.workspace }}\${{ env.CORRETTO_SOURCE_DIR }}"
          $targetDir = "D:\corretto_build"
          
          if (Test-Path $targetDir) {
            Remove-Item -Recurse -Force $targetDir
          }
          
          New-Item -ItemType Directory -Path $targetDir -Force
          Get-ChildItem -Path $sourceDir -Recurse | Move-Item -Destination $targetDir -Force
          
          echo "CORRETTO_BUILD_DIR=$targetDir" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.8
        with:
          version: "v0.10.0"

      - name: Configure sccache for C/C++
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $env:GITHUB_ENV
          echo "CC=sccache gcc" >> $env:GITHUB_ENV
          echo "CXX=sccache g++" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Cache Cygwin installation
        id: cache-cygwin
        uses: actions/cache@v4
        with:
          path: |
            C:\cygwin64
            !C:\cygwin64\var\cache\setup
          key: ${{ runner.os }}-cygwin-${{ hashFiles('**/cygwin-packages.txt') }}-v3

      - name: Install Cygwin with necessary packages
        if: steps.cache-cygwin.outputs.cache-hit != 'true'
        run: |
          # Download Cygwin setup
          $setupUrl = "https://www.cygwin.com/setup-x86_64.exe"
          $setupPath = "$env:TEMP\cygwin-setup.exe"
          
          Write-Host "Downloading Cygwin setup..."
          Invoke-WebRequest -Uri $setupUrl -OutFile $setupPath
          
          # Install Cygwin with packages
          $cygwinMirror = "https://mirrors.kernel.org/sourceware/cygwin/"
          $installArgs = @(
            "--quiet-mode",
            "--no-shortcuts",
            "--no-startmenu",
            "--no-desktop",
            "--site", $cygwinMirror,
            "--root", "C:\cygwin64",
            "--local-package-dir", "$env:TEMP\cygwin-packages",
            "--packages", $env:CYGWIN_PACKAGES
          )
          
          Write-Host "Installing Cygwin packages: $env:CYGWIN_PACKAGES"
          & $setupPath @installArgs
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Cygwin installation failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          
          # Clean up package cache
          Remove-Item -Recurse -Force "$env:TEMP\cygwin-packages" -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Add Cygwin to PATH
        run: echo "C:\cygwin64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install Visual Studio Build Tools
        run: |
          Write-Host "Installing Visual Studio Build Tools..."
          $vsUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
          $vsPath = "$env:TEMP\vs_buildtools.exe"
          
          # Download Visual Studio Build Tools
          Invoke-WebRequest -Uri $vsUrl -OutFile $vsPath
          
          # Install with C++ build tools
          $vsArgs = @(
            "--quiet",
            "--wait",
            "--add", "Microsoft.VisualStudio.Workload.VCTools",
            "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
            "--add", "Microsoft.VisualStudio.Component.Windows10SDK.20348"
          )
          
          & $vsPath @vsArgs
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Visual Studio Build Tools installation failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh

      - name: Configure Corretto Build
        working-directory: ${{ env.CORRETTO_BUILD_DIR }}
        run: |
          $bootJdkPath = $env:JAVA_HOME
          if (-not $bootJdkPath) {
            Write-Error "Bootstrap JDK path (JAVA_HOME) is not set!"
            exit 1
          }
          
          # Convert Windows path to Cygwin path
          $bootJdkCygwin = & C:\cygwin64\bin\cygpath --unix $bootJdkPath
          Write-Host "Bootstrap JDK (Cygwin path): $bootJdkCygwin"
          
          # Configure with optimizations for release build
          $configArgs = @(
            "--with-boot-jdk=$bootJdkCygwin",
            "--disable-warnings-as-errors",
            "--with-debug-level=release",
            "--with-native-debug-symbols=none",
            "--with-num-cores=$(Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty NumberOfLogicalProcessors)",
            "--with-tools-dir=`"C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.41.34120\bin\Hostx64\x64`""
          )
          
          Write-Host "Configuring build with: $($configArgs -join ' ')"
          
          # Set environment variables for sccache
          $env:CC = "sccache gcc"
          $env:CXX = "sccache g++"
          
          & C:\cygwin64\bin\bash -c "CC='sccache gcc' CXX='sccache g++' ./configure $($configArgs -join ' ')"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Configuration failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh

      - name: Build Corretto (make images)
        working-directory: ${{ env.CORRETTO_BUILD_DIR }}
        run: |
          $numCores = Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty NumberOfLogicalProcessors
          Write-Host "Building with $numCores parallel jobs..."
          
          # Set environment variables for sccache
          $env:CC = "sccache gcc"
          $env:CXX = "sccache g++"
          
          # Use bash to run make with parallel jobs
          & C:\cygwin64\bin\bash -c "CC='sccache gcc' CXX='sccache g++' make JOBS=$numCores images"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh

      - name: Clean Debug Symbols from JDK Image
        working-directory: ${{ env.CORRETTO_BUILD_DIR }}
        run: |
          $jdkImagePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          
          if ($jdkImagePath) {
            Write-Host "Cleaning debug symbols from $jdkImagePath"
            $cleanedFiles = @()
            
            # Remove .pdb files
            $pdbFiles = Get-ChildItem -Path $jdkImagePath -Recurse -Include "*.pdb" -ErrorAction SilentlyContinue
            foreach ($file in $pdbFiles) {
              Remove-Item -Path $file.FullName -Force
              $cleanedFiles += $file.Name
            }
            
            # Remove .map files
            $mapFiles = Get-ChildItem -Path $jdkImagePath -Recurse -Include "*.map" -ErrorAction SilentlyContinue
            foreach ($file in $mapFiles) {
              Remove-Item -Path $file.FullName -Force
              $cleanedFiles += $file.Name
            }
            
            Write-Host "Cleaned $($cleanedFiles.Count) debug symbol files"
            if ($cleanedFiles.Count -gt 0) {
              Write-Host "Removed files: $($cleanedFiles -join ', ')"
            }
          } else {
            Write-Warning "Could not find JDK image directory to clean."
          }
        shell: pwsh

      - name: Prepare Artifact Structure
        id: prepare_artifact
        working-directory: ${{ env.CORRETTO_BUILD_DIR }}
        run: |
          $jdkSourcePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          if (-not $jdkSourcePath) {
            Write-Error "Could not find JDK image directory"
            exit 1
          }
          
          # Extract version information
          $releaseFile = Join-Path $jdkSourcePath "release"
          if (-not (Test-Path $releaseFile)) {
            Write-Error "Could not find release file at $releaseFile"
            exit 1
          }
          
          $releaseContent = Get-Content $releaseFile -Raw
          $javaVersion = ($releaseContent | Select-String 'JAVA_VERSION="([^"]+)"').Matches[0].Groups[1].Value
          
          if (-not $javaVersion) {
            Write-Error "Could not parse JAVA_VERSION from release file"
            exit 1
          }
          
          Write-Host "Extracted JAVA_VERSION: $javaVersion"
          echo "JAVA_VERSION_EXTRACTED=$javaVersion" >> $env:GITHUB_OUTPUT
          
          # Create optimized staging directory on D: drive
          $stagingDir = "D:\staging_artifact"
          $targetDirName = "corretto-21-lilliput-$javaVersion"
          $fullTargetPath = Join-Path $stagingDir $targetDirName
          
          if (Test-Path $stagingDir) {
            Remove-Item -Recurse -Force $stagingDir
          }
          New-Item -ItemType Directory -Path $fullTargetPath -Force | Out-Null
          
          # Move JDK contents to staging area
          Write-Host "Moving JDK contents to staging area..."
          Get-ChildItem -Path $jdkSourcePath | Move-Item -Destination $fullTargetPath -Force
          
          # Set staging path for upload
          echo "STAGING_DIR=$stagingDir" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Upload Windows JDK Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: corretto-21-lilliput-${{ steps.prepare_artifact.outputs.JAVA_VERSION_EXTRACTED }}-windows-x64-jdk
          path: ${{ env.STAGING_DIR }}/
          retention-days: 30
          compression-level: 6

      - name: Show sccache statistics
        if: always()
        run: sccache --show-stats
        shell: pwsh

      - name: Cleanup temporary files
        if: always()
        run: |
          # Clean up temporary directories to save space
          if (Test-Path "D:\corretto_build") {
            Remove-Item -Recurse -Force "D:\corretto_build" -ErrorAction SilentlyContinue
          }
          if (Test-Path "D:\staging_artifact") {
            Remove-Item -Recurse -Force "D:\staging_artifact" -ErrorAction SilentlyContinue
          }
        shell: pwsh
