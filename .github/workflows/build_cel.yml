name: Build Celeritas

on:
  workflow_dispatch:
    inputs:
      minecraft_version:
        description: 'Minecraft version (from list)'
        required: false
        type: choice
        options:
          - 'use_custom'
          - '1.21.8'
          - '1.21.1'
          - '1.20.1'
          - '1.12.2'
          - '1.10.2'
          - '1.8.1'
          - '1.7.10'
          - '1.7.3'
          - '1.2.5'
          - 'all'
        default: '1.20.1'
      
      custom_version:
        description: 'Custom version (e.g., 1.20.3 or >=1.18 <1.20)'
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Clone repository
      run: git clone https://git.taumc.org/embeddedt/celeritas.git .
      shell: pwsh
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'graalvm'
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false
    
    - name: Determine version to build
      id: version
      run: |
        echo "Selected from dropdown: ${{ github.event.inputs.minecraft_version }}"
        echo "Custom version entered: ${{ github.event.inputs.custom_version }}"
        
        if [[ "${{ github.event.inputs.minecraft_version }}" == "use_custom" ]]; then
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            echo "Using custom version: ${{ github.event.inputs.custom_version }}"
            echo "target_version=${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
            echo "cache_key=custom-$(echo '${{ github.event.inputs.custom_version }}' | sed 's/[^a-zA-Z0-9.-]/-/g')" >> $GITHUB_OUTPUT
          else
            echo "Error: Selected 'use_custom' but no custom version provided"
            exit 1
          fi
        else
          echo "Using dropdown selection: ${{ github.event.inputs.minecraft_version }}"
          echo "target_version=${{ github.event.inputs.minecraft_version }}" >> $GITHUB_OUTPUT
          echo "cache_key=${{ github.event.inputs.minecraft_version }}" >> $GITHUB_OUTPUT
        fi
        
        echo "Final target version will be: ${{ github.event.inputs.minecraft_version == 'use_custom' && github.event.inputs.custom_version || github.event.inputs.minecraft_version }}"
    
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          build/*
          !build/libs/
          .gradle/
          versions/*/build/
          !versions/*/build/libs/
        key: ${{ runner.os }}-celeritas-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle.properties', 'stonecutter.gradle.kts') }}-${{ steps.version.outputs.cache_key }}
        restore-keys: |
          ${{ runner.os }}-celeritas-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle.properties', 'stonecutter.gradle.kts') }}-all
          ${{ runner.os }}-celeritas-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle.properties', 'stonecutter.gradle.kts') }}-
          ${{ runner.os }}-celeritas-build-
      
    - name: Build for specific version
      if: ${{ steps.version.outputs.target_version != 'all' }}
      run: | 
        echo "Building for version: ${{ steps.version.outputs.target_version }}"
        ./gradlew -Ptarget_versions="${{ steps.version.outputs.target_version }}" packageJar
      
    - name: Build for all versions
      if: ${{ steps.version.outputs.target_version == 'all' }}
      run: ./gradlew packageJar
      
    - name: Determine version for filtering
      id: filter_version
      run: |
        VERSION="${{ steps.version.outputs.target_version }}"
        # Convert 1.20.1 to 20.1, 1.21.8 to 21.8, etc.
        SHORT_VERSION=$(echo "$VERSION" | sed 's/^1\.//')
        echo "short_version=$SHORT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: celeritas-${{ steps.version.outputs.cache_key }}-${{ github.run_number }}
        path: build/libs/**/*mc${{ steps.filter_version.outputs.short_version }}*.jar
        if-no-files-found: error
