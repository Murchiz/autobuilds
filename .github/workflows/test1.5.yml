name: Build Corretto 21 lilliput-2 Msys2 edition

on:
  schedule:
    - cron: '0 5 * * 1'
  workflow_dispatch:

env:
  UPSTREAM_REPO: corretto/corretto-21
  UPSTREAM_BRANCH: lilliput-2
  GITHUB_VARIABLE_NAME: LAST_BUILT_CORRETTO_LILLIPUT_SHA
  CORRETTO_SOURCE_DIR: corretto_source_checkout
  # Optimization settings
  BUILD_JOBS: 8
  BUILD_CORES: 4
  BUILD_MEMORY: 16384
  JVM_ARGS: "-Xmx8G"

jobs:
  build_if_new_commits:
    runs-on: windows-2022
    permissions:
      contents: read
      actions: read
    steps:
      - name: Read Last Built Upstream SHA
        id: read_last_sha
        run: |
          $sha_from_var = "${{ vars[env.GITHUB_VARIABLE_NAME] || '' }}"
          echo "last_sha=$sha_from_var" >> $GITHUB_OUTPUT
        shell: pwsh
      
      # Optimization: Do SHA check before heavy operations
      - name: Quick SHA Check
        id: quick_check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $needs_build = "false"
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $needs_build = "true"
          } else {
            # Use GitHub API to check latest commit without full checkout
            $latest_sha = gh api repos/${{ env.UPSTREAM_REPO }}/commits/${{ env.UPSTREAM_BRANCH }} --jq .sha
            if ("${{ steps.read_last_sha.outputs.last_sha }}" -ne "$latest_sha") {
              $needs_build = "true"
            }
            echo "upstream_sha=$latest_sha" >> $env:GITHUB_OUTPUT
          }
          echo "needs_build=$needs_build" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      # Skip all following steps if no build needed
      - name: Exit early if no build needed
        if: steps.quick_check.outputs.needs_build == 'false'
        run: |
          Write-Host "No new commits found. Skipping build."
          exit 0
        shell: pwsh
      
      - name: Set up workspace on faster D drive
        if: steps.quick_check.outputs.needs_build == 'true'
        run: |
          $workspaceOnD = "D:\gh_workspace"
          New-Item -ItemType Directory -Path $workspaceOnD -Force | Out-Null
          echo "WORKSPACE_ROOT=$workspaceOnD" >> $env:GITHUB_ENV
        shell: pwsh
      
      # Optimization: Shallow clone directly to D: drive
      - name: Checkout upstream repository to D drive
        if: steps.quick_check.outputs.needs_build == 'true'
        id: checkout_upstream
        working-directory: D:\gh_workspace
        run: |
          git clone --depth 1 --branch ${{ env.UPSTREAM_BRANCH }} https://github.com/${{ env.UPSTREAM_REPO }}.git ${{ env.CORRETTO_SOURCE_DIR }}
          cd ${{ env.CORRETTO_SOURCE_DIR }}
          $current_sha = (git rev-parse HEAD).Trim()
          echo "sha=$current_sha" >> $env:GITHUB_OUTPUT
          # Update the full path
          $fullPath = Join-Path $env:WORKSPACE_ROOT $env:CORRETTO_SOURCE_DIR
          echo "CORRETTO_SOURCE_DIR=$fullPath" >> $env:GITHUB_ENV
        shell: pwsh
      
      # Optimization: Parallel setup of dependencies
      - name: Set up Corretto 21 as Bootstrap JDK
        if: steps.quick_check.outputs.needs_build == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
      
      # Use exact MSYS2 config from Corretto
      - name: Install MSYS2
        if: steps.quick_check.outputs.needs_build == 'true'
        uses: msys2/setup-msys2@v2.28.0
        with:
          install: 'autoconf tar unzip zip make'
          update: true
          path-type: minimal
          location: D:\msys2_minimal
      
      # Optimization: Set MSYS2 temp to D: drive
      - name: Configure build environment
        if: steps.quick_check.outputs.needs_build == 'true'
        shell: msys2 {0}
        run: |
          mkdir -p /d/tmp
          echo "export TMPDIR=/d/tmp" >> ~/.bashrc
          echo "export TMP=/d/tmp" >> ~/.bashrc
          echo "export TEMP=/d/tmp" >> ~/.bashrc
      
      - name: Configure Corretto Build Optimized
        if: steps.quick_check.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: msys2 {0}
        run: |
          export TMPDIR=/d/tmp
          export TMP=/d/tmp
          export TEMP=/d/tmp
          
          BOOT_JDK_MSYS=$(cygpath -u "$JAVA_HOME")
          
          ./configure --with-boot-jdk="$BOOT_JDK_MSYS" \
                      --disable-warnings-as-errors \
                      --with-debug-level=release \
                      --with-native-debug-symbols=none \
                      --with-num-cores=${{ env.BUILD_CORES }} \
                      --with-memory-size=${{ env.BUILD_MEMORY }} \
                      --with-jobs=${{ env.BUILD_JOBS }} \
                      --with-boot-jdk-jvmargs="${{ env.JVM_ARGS }}" \
                      --enable-javac-server \
                      --disable-full-docs
      
      - name: Build Corretto make images Optimized
        if: steps.quick_check.outputs.needs_build == 'true'
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: msys2 {0}
        run: |
          export TMPDIR=/d/tmp
          export TMP=/d/tmp
          export TEMP=/d/tmp
          
          make JOBS=${{ env.BUILD_JOBS }} images
      
      - name: Prepare Artifact Structure
        if: steps.quick_check.outputs.needs_build == 'true'
        id: prepare_artifact
        working-directory: ${{ env.CORRETTO_SOURCE_DIR }}
        shell: pwsh
        run: |
          $jdkSourcePath = Get-ChildItem -Path "build\*\images\jdk" -Directory | Select-Object -First 1 -ExpandProperty FullName
          $releaseFile = Join-Path $jdkSourcePath "release"
          $releaseContent = Get-Content $releaseFile -Raw | ConvertFrom-StringData -Delimiter '='
          $javaVersion = $releaseContent.JAVA_VERSION.Trim('"')
          echo "JAVA_VERSION_EXTRACTED=$javaVersion" >> $GITHUB_OUTPUT
          
          $stagingDir = Join-Path $env:GITHUB_WORKSPACE "staging_artifact"
          $targetDirName = "corretto-21-lilliput-${javaVersion}"
          $fullTargetPathInStaging = Join-Path $stagingDir $targetDirName
          New-Item -ItemType Directory -Path $fullTargetPathInStaging -Force | Out-Null
          
          Move-Item -Path (Join-Path $jdkSourcePath "*") -Destination $fullTargetPathInStaging -Force
      
      - name: Upload Windows JDK Build Artifact
        if: steps.quick_check.outputs.needs_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: corretto-21-lilliput-${{ steps.prepare_artifact.outputs.JAVA_VERSION_EXTRACTED }}-windows-x64-jdk
          path: staging_artifact/
      
      # Update SHA only after successful build and upload
      - name: Update GitHub Repository Variable with PAT
        if: steps.quick_check.outputs.needs_build == 'true'
        env:
          NEW_SHA_TO_SAVE: ${{ steps.quick_check.outputs.upstream_sha || steps.checkout_upstream.outputs.sha }}
          GH_TOKEN: ${{ secrets.MY_PAT }}
        run: |
          gh variable set "${{ env.GITHUB_VARIABLE_NAME }}" --body "${NEW_SHA_TO_SAVE}" --repo "${{ github.repository }}"
        shell: bash
